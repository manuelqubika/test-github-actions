#**********************************************************************************
# Copyright (C) 2024 Advanced Micro Devices, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  IN NO EVENT SHALL
# THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
# **********************************************************************************

name: Format checker
description: Run precommit script to format check on all PR files
inputs:
  GITHUB_TOKEM:
    description: HTTP Token to consume the github API
    required: true

outputs:
  results:
    description: "result of the formatting script"
    value: ${{ steps.run_script.outputs.results }}

runs:
  using: composite
  steps:
    - name: Get list of changed files via API
      id: changed-files
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        # Fetch the PR number from the event context
        PR_NUMBER=$(jq -r '.pull_request.number' < "${GITHUB_EVENT_PATH}")

        # Use the GitHub API to get the list of changed files
        echo "Fetching changed files for PR #$PR_NUMBER"
        FILES=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                  -H "Accept: application/vnd.github.v3+json" \
                      "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/files" \
                  | jq -r '.[].filename')

        # Filter files for .c, .h, and .cpp extensions
        FILTERED_FILES=$(echo "$FILES" | grep -E '\.(c|h|cpp)$')

        # Save filtered files to an output variable
        echo "Filtered files: $FILTERED_FILES"
        echo "::set-output name=files::$(echo $FILTERED_FILES | tr '\n' ',')"


    # Run the script for each file
    - name: Run script for each file
      id: run_script
      shell: bash
      run: |
        # Read the changed files from the output
        for FILE in $(echo "${{ steps.changed-files.outputs.files }}" | tr ',' '\n'); do
          echo "Running script for file: $FILE"
          ./tools/formatter.sh "$FILE"
        done
